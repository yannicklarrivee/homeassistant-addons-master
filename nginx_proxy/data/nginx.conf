#load_module modules/ngx_http_naxsi_module.so;
load_module modules/ngx_http_js_module.so;
daemon off;
error_log stderr;
pid /var/run/nginx.pid;

events {
	worker_connections 1024;
}

http {
    js_include hass_auth_script.js;
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    upstream websocket {
        server %%HOMEASSISTANT%%:%%HA_PORT%%;
    }
    server_tokens off;

    server_names_hash_bucket_size 64;
	
    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    #include /data/cloudflare.conf;
	
    #server {
        #server_name _;
        #listen 80 default_server;
        #listen 443 ssl http2 default_server;
        #ssl_reject_handshake on;
        #return 444;
    #}

    server {
        server_name %%DOMAIN%%;

        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        server_name %%DOMAIN%%;

        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_certificate /ssl/%%FULLCHAIN%%;
        ssl_certificate_key /ssl/%%PRIVKEY%%;

        # dhparams file
        ssl_dhparam /data/dhparams.pem;

        listen 443 ssl http2;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        proxy_buffering off;

        location /oauth2/ {
          proxy_pass       http://%%OAUTH2_PROXY%%:%%OAUTH2_PROXY_PORT%%;
          proxy_set_header Host                    $host;
          proxy_set_header X-Real-IP               $server_addr; #$remote_addr;
          proxy_set_header X-Scheme                $scheme;
          proxy_set_header X-Auth-Request-Redirect $request_uri;
        }
        location = /oauth2/auth {
          proxy_pass       http://%%OAUTH2_PROXY%%:%%OAUTH2_PROXY_PORT%%;
          proxy_set_header Host             $host;
          proxy_set_header X-Real-IP        $server_addr; #$remote_addr;
          proxy_set_header X-Scheme         $scheme;
          # nginx auth_request includes headers but not body
          proxy_set_header Content-Length   "";
          proxy_pass_request_body           off;
        }

        location / {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;
            auth_request_set $email $upstream_http_x_auth_request_email;
            proxy_pass http://%%HOMEASSISTANT%%:%%HA_PORT%%;
            proxy_set_header Host $host;
            proxy_redirect http:// https://;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Accept-Encoding "";
            # inject window.externalApp into documents
            sub_filter '<head>' '<head><script>window.externalApp={getExternalAuth:function(){fetch("/api/get_token").then((resp) => resp.text()).then(function(data) {window.externalAuthSetToken(true,{"access_token":data,"expires_in":2592000});}).catch(function(error) {window.externalAuthSetToken(false);});},revokeExternalAuth:function(){window.externalAuthRevokeToken(false);}};</script>';
            sub_filter_once on;
        
            # redirect the frontend to use external auth when it attempts to authorize
            location /auth/authorize {
                auth_request /oauth2/auth;
                error_page 401 = /oauth2/sign_in;
                return 301 /?external_auth=1;
            }
            
            # endpoint for returning tokens with njs based on email
            location /api/get_token {
                auth_request /oauth2/auth;
                error_page 401 = /oauth2/sign_in;
                auth_request_set $email $upstream_http_x_auth_request_email;
                js_content get_token;
            }
        
            location /api {
                auth_request /oauth2/auth;
                proxy_pass http://%%HOMEASSISTANT%%:%%HA_PORT%%;
            }

            location ^~ /api/websocket {
                auth_request /oauth2/auth;
                proxy_pass http://%%HOMEASSISTANT%%:%%HA_PORT%%;
            }

            location ^~ /api/google_assistant {
                auth_request off;
                proxy_pass http://%%HOMEASSISTANT%%:%%HA_PORT%%;
            }
        
            location ^~ /api/tts_proxy/ {
                auth_request off;
                proxy_pass http://%%HOMEASSISTANT%%:%%HA_PORT%%;
            }
        
            location ^~ /api/telegram_webhooks {
                auth_request off;
                proxy_pass http://%%HOMEASSISTANT%%:%%HA_PORT%%;
            }
        
            location /api/notify.html5/callback {
                auth_request off;
                proxy_set_header Authorization $http_authorization;
                if ($http_authorization = "") { return 403; }
                proxy_pass http://%%HOMEASSISTANT%%:%%HA_PORT%%;
            }            
        }
    }


}
